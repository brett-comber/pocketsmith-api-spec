openapi: 3.0.1 

info:
  contact:
    email: api@pocketsmith.com
    name: API Support
  description: The public PocketSmith API
  title: PocketSmith
  version: '2.0' 

servers:
  - description: Production
    url: https://api.pocketsmith.com/v2 

security:
  - developerKey: []

x-samples-languages:
  - curl
  - node
  - javascript
  - php
  - python 


components:

  securitySchemes:

    developerKey:
      type: apiKey
      name: X-Developer-Key
      in: header
      description: If you want to build a tool just for yourself, be it a desktop
        widget to display your balances or a tool to import transactions from a bank
        without a bank feed, you can use our developer keys feature. You can issue
        yourself a key which will give you persistent API access to just your account.
        You should rotate your keys regularly. 

    oauth2:
      type: oauth2
      description: If you want to a create an app for PocketSmith that other PocketSmith
        users can use, you'll be using OAuth 2. To register an app with PocketSmith,
        please email us on api@pocketsmith.com. Let us know a bit about yourself and
        what you plan on building. When approved, you will be provided with your client_id
        and client_secret to start using OAuth. Then, check out our guide for integrating
        OAuth to get started.
      flows:
        authorizationCode:
          authorizationUrl: https://my.pocketsmith.com/oauth/authorize
          scopes:
            accounts.read: Access to list and view transaction accounts
            accounts.write: Access to update and delete transaction accounts
            attachments.read: Access to view attachments
            attachments.write: Ability to create, update and delete attachments
            categories.read: Access to view categories
            categories.write: Ability to edit and delete categories
            transactions.read: Access to list and view accounts and transactions
            transactions.write: Access to create, update and delete transactions
            user.read: Access the user's details and preferences
            user.write: Access to change the user's details and preferences
          tokenUrl: https://api.pocketsmith.com/v2/oauth/access_token 

  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: A message describing the error that occurred.
                example: A message describing the error that occurred.

    '403':
      description: Not Allowed
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: A message describing the error that occurred.
                example: A message describing the error that occurred.

    '404':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: A message describing the error that occurred.
                example: A message describing the error that occurred.

    '422':
      description: Validation Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: A message describing the error that occurred.
                example: A message describing the error that occurred.

  schemas:

    Account:
      type: object
      properties:
        created_at:
          type: string
          format: date
          description: When the account was created.
          example: '2018-02-27'
        currency_code:
          type: string
          description: The currency code for the account.
          example: NZD
        current_balance:
          type: number
          description: The current balance of the account.
          example: 2694.39
        current_balance_date:
          type: string
          format: date
          description: The date of the current balance.
          example: '2018-02-27'
        id:
          type: integer
          description: The unique identifier of the account.
          example: 42
        is_net_worth:
          type: boolean
          description: Whether the account is a net worth asset.
          example: false
        primary_scenario:
          $ref: '#/components/schemas/Scenario'
        primary_transaction_account:
          $ref: '#/components/schemas/TransactionAccount'
        scenarios:
          type: array
          description: All scenarios that compose the account, including the primary.
          items:
            $ref: '#/components/schemas/Scenario'
        title:
          type: string
          description: The title of the account.
          example: Bank of Foo
        transaction_accounts:
          type: array
          description: All transaction accounts that compose the account, including
            the primary.
          items:
            $ref: '#/components/schemas/TransactionAccount'
        type:
          type: string
          description: The type of the account.
          example: bank
          enum:
            - bank
            - credits
            - stocks
            - mortgage
            - loans
            - vehicle
            - property
            - other_liability
        updated_at:
          type: string
          format: date
          description: When the account was last updated.
          example: '2018-02-27'

    Attachment:
      type: object
      properties:
        content_type:
          type: string
          description: The content type of the attachment.
          example: image/png
        content_type_meta:
          type: object
          properties:
            description:
              type: string
              description: The content type description of the attachment
              example: PNG image
            extension:
              type: string
              description: The extension type of the attachment
              example: png
            title:
              type: string
              description: The content type title of the attachment
              example: PNG
        created_at:
          type: string
          format: date-time
          description: When the attachment was created
          example: '2015-08-16T02:17:02Z'
        file_name:
          type: string
          description: The file name of the attachment
          example: taxi.png
        id:
          type: integer
          description: The unique identifier of the attachment
          example: 1438154
        original_url:
          type: string
          description: The url of the attachment
          example: https://image.com/image.png
        title:
          type: string
          description: The title of the attachment. If blank or not provided, the
            title will be derived from the file name.
          example: Invoice for taxi
        type:
          type: string
          description: The type of attachment
          example: image
        updated_at:
          type: string
          format: date-time
          description: When the attachment was last updated
          example: '2015-08-16T02:17:02Z'
        variants:
          type: object
          properties:
            large_url:
              type: string
              description: The url of the large version of the attachment
              example: https://image.com/image.png
            thumb_url:
              type: string
              description: The url of the thumb version of the attachment
              example: https://image.com/image.png

    BudgetAnalysis:
      type: object
      properties:
        average_actual_amount:
          type: number
          description: The average actual (transactions) amount across all periods.
          example: -42.3
        average_forecast_amount:
          type: number
          description: The average budgeted amount across all periods.
          example: -60
        end_date:
          type: string
          format: date
          description: The end date of the budget analysis.
          example: '2016-11-30'
        currency_code:
          type: string
          description: The currency code for this BudgetAnalysis.
          example: NZD
        periods:
          type: array
          description: The period analyses that this budget analysis comprises.
          items:
            $ref: '#/components/schemas/Period'
        start_date:
          type: string
          format: date
          description: The start date of the budget analysis.
          example: '2016-11-01'
        total_actual_amount:
          type: number
          description: The total actual (transactions) amount across all periods.
          example: -42.3
        total_forecast_amount:
          type: number
          description: The total budgeted amount across all periods.
          example: -60
        total_over_by:
          type: number
          description: The total amount the budget was exceeded across all periods.
          example: 0
        total_under_by:
          type: number
          description: The total amount the budget was under by across all periods.
          example: 17.7

    BudgetAnalysisPackage:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/Category'
        expense:
          $ref: '#/components/schemas/BudgetAnalysis'
        income:
          $ref: '#/components/schemas/BudgetAnalysis'
        is_transfer:
          type: boolean
          description: Whether the expense budget analysis looks like a transfer to
            the income budget analysis, based on a number of heuristics.
          example: false

    Category:
      type: object
      properties:
        children:
          type: array
          description: The category's child categories.
          items:
            $ref: '#/components/schemas/Category'
        colour:
          type: string
          format: CSS-style hex triplet
          description: The colour for the category.
          example: '#00ff00'
          pattern: ^#[0-9a-fA-F]{6}
        created_at:
          type: string
          format: date-time
          description: When the category was created.
          example: '2015-08-16T02:17:02Z'
        id:
          type: integer
          description: The unique identifier of the category.
          example: 1438154
        is_transfer:
          type: boolean
          description: Whether this category has been marked as a transfer category.
          example: false
        parent_id:
          type: integer
          description: The unique identifier of the parent category of this category,
            or null if this category has no parent (i.e. is a top-level category)
          example: 42
        title:
          type: string
          description: The title of the category.
          example: Beer
        updated_at:
          type: string
          format: date-time
          description: When the category was last updated.
          example: '2015-08-16T02:17:02Z'

    CategoryRule:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/Category'
        created_at:
          type: string
          format: date-time
          description: When the category rule was created.
          example: '2019-07-09T10:06:02Z'
        id:
          type: integer
          description: The unique identifier of the category rule.
          example: 1438154
        payee_matches:
          type: string
          description: The keyword/s to match the transactions payees.
          example: Countdown
        updated_at:
          type: string
          format: date-time
          description: When the category rule was last updated.
          example: '2019-07-09T10:06:02Z'

    DataConnection:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the data connection
          example: '42'
        name:
          type: string
          description: User-defined nickname for the data connection
          nullable: true
        status:
          type: string
          description: Sync/auth status of the data connection
          enum:
            - synced
            - unsynced
            - unauthorised
            - authorisation_failed # XXX (zkanzler): am I missing any others?
        status_changed_at:
          type: string
          format: date-time
          description: When the data connection's status last changed
        status_changed_at_hash:
          type: string
          description: MD5 hash of the status_changed_at field
        error_detail:
          type: string
          description: '?'
          nullable: true # XXX (zkanzler): what kind of error does this describe?
        user_interaction_likely:
          type: boolean # XXX (zkanzler): what type of user interaction does this refer to?
          description: 'GUESSING: Whether syncing this data connection is likely to
            require user interaction'
        categorisation:
          type: boolean
          description: Whether automatic categorisation of transactions is enabled
        automatic_syncing:
          type: boolean
          description: Whether the data connection will automatically sync when logged
            in to PocketSmith
        automatic_syncing_overridden:
          type: boolean # XXX (zkanzler): what does this mean?
          description: UNKNOWN
        pending_transactions:
          type: boolean
          description: Whether to receive pending transactions from this data connection,
            if available
        login_form:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Form'
        interactive_login_form:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Form'
        external_authorisation_url:
          type: string
          format: url
          description: UNKNOWN
          nullable: true # XXX (zkanzler): what does this field describe?
        external_syncing_url:
          type: string
          format: url
          description: UNKNOWN
          nullable: true # XXX (zkanzler): what does this field describe?
        last_successful_sync_at:
          type: string
          format: date-time
          description: When the data connection last synced successfully
          nullable: true
        next_sync_possible_at:
          type: string
          format: date-time
          description: When the data connection is next allowed to sync at
          nullable: true
        next_background_sync_at:
          type: string
          format: date-time
          description: When the data connection is scheduled to sync in the background
            next
          nullable: true
        accounts_updated_at:
          type: string
          format: date-time
          description: When the accounts tied to the data connection were last updated
          nullable: true
        soft_locked_until:
          type: string
          format: date-time
          description: UNKNOWN
          nullable: true # XXX (zkanzler): what does this field describe?
        user:
          type: object
          description: Abbreviated properties of the user owning the data connection
          properties:
            id:
              type: string
              format: integer
            email:
              type: string
              format: email
            salt_edge_partners_consented:
              type: boolean # XXX (zkanzler): what does this field describe?
              description: UNKNOWN
        provider:
          $ref: '#/components/schemas/Provider'
        created_at:
          type: string
          format: date-time
          description: When the data connection was created
          nullable: true
        updated_at:
          type: string
          format: date-time
          description: When the data connection was last updated
          nullable: true

    Error:
      type: object
      properties:
        error:
          type: string
          description: A message describing the error that occurred.
          example: A message describing the error that occurred.

    Form:
      type: object
      properties:
        approximate_expiry_at:
          type: string
          format: date-time
          description: Estimated time when the form will no longer accept submissions
          nullable: true
        encryption:
          type: string
          description: Type of encryption employed by the form
          enum:
            - pki # XXX (zkanzler): are there any other types?
        public_key:
          type: string
          description: RSA public key in PKCS#8 PEM format with which to encrypt values
            of encrypted fields with # NOTE (zkanzler): this example is a 2048 bit key (as have been all pubkeys I've encountered)
          example: |
            -----BEGIN PUBLIC KEY-----
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvkywgFipFihDBpqw8nre
            Td/FnONtwrfXNapxphgtWa026eyRkNBwyn/RFygaZ2QjAPxfd3UyjWSH6OQDoq4d
            58lnrWLgcz8iyp6IAe/R8MMLauzY4E+t2NEfiFxN0qQBmg7K53c3F/1M4nygRORQ
            oPV4CHwBH82+0c4S14JykZZEd7GQEKx8aAJ51x22PhVzP32gIkA2jrNU75hfHlA1
            wNpMwQKlgfVJFY342QOWrbBVnv0ReFcPM5k8xOgq5OOfgyapddYlH+8VQeVie3xR
            7D/8ehpydLGdRaJOdN/wGgEl09FJ0NWglqV1epWMBIpMTfkkB2Cu6jmuyQcIaLhs
            LwIDAQAB
            -----END PUBLIC KEY-----
        rows:
          type: array
          description: Rows of form fields to display
          items:
            type: object
            properties:
              label:
                type: string
                description: Display name of the row
              fields:
                type: array
                description: Form fields to display in the row
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Index of the field within the whole form
                      example: 1
                    name:
                      type: string
                      description: Unique name of the form field
                      example: password
                    type:
                      type: string
                      description: Display type of the form field
                      enum:
                        - text
                        - password
                        - option
                        - radio
                        - image
                    encrypted:
                      type: boolean
                      description: Whether the value of the form field should be encrypted
                        with the form's `public_key`
                    value:
                      type: string
                      nullable: true
                      description: Value of the field, possibly encrypted
                    image:
                      type: string
                      format: byte
                      nullable: true # XXX (zkanzler): is this supposed to be the preview of an uploaded image?
                      description: Base64-encoded JPEG image to display by the field
                    placeholder:
                      type: string
                      nullable: true
                      description: Placeholder text to display in the field
                    editable:
                      type: boolean
                      description: Whether the user is allowed to edit the value of
                        the field
                    optional:
                      type: boolean
                      description: Whether the form can be submitted without providing
                        a value to the field
                    max_length:
                      type: integer
                      nullable: true
                      description: Maximum number of characters allowed in the field
                        value
                    prefix:
                      type: string
                      nullable: true
                      description: Text to display just before the form field
                    suffix:
                      type: string
                      nullable: true
                      description: Text to display just after the form field
                    options:
                      type: array
                      description: For fields with type=option, the options to be
                        displayed in the dropdown
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: Label of the option
                          value:
                            type: string
                            description: Value of the option

    Institution:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          description: When the institution was created.
          example: '2015-04-21T22:42:22Z'
        currency_code:
          type: string
          description: The currency code of the institution.
          example: NZD
        id:
          type: integer
          description: The unique identifier of the institution.
          example: 57
        title:
          type: string
          description: The title of the institution.
          example: Bank of Foo
        updated_at:
          type: string
          format: date-time
          description: When the institution was last updated.
          example: '2015-04-21T22:42:22Z'

    Period:
      type: object
      properties:
        actual_amount:
          type: number
          description: The sum of all actuals (transactions) in the period.
          example: -42.3
        current:
          type: boolean
          description: Whether this period is current, such that the current date
            (in the user's time zone) falls within the date range.
          example: true
        end_date:
          type: string
          format: date
          description: The end date of the period.
          example: '2016-11-30'
        currency_code:
          type: string
          description: The currency code for amounts in this Period.
          example: NZD
        forecast_amount:
          type: number
          description: The sum of all forecast sources (budget events) in the period,
            for comparison against the actual amount.
          example: -60
        over_budget:
          type: boolean
          description: Whether the budget has been exceeded in the period.
          example: false
        over_by:
          type: number
          description: How much the budget has been exceeded by in the period.
          example: 0
        percentage_used:
          type: number
          description: The percentage of the budget that has been used in the period.
          example: 70.5
        refund_amount:
          type: number
          description: This attribute tracks the amount that has been refunded or
            deducted to the actual amount. When a category is set to "always expense",
            any credit transactions are treated as refunds and when set to "always
            income", any debit transactions are treated as deductions.
          example: 5.6
        start_date:
          type: string
          format: date
          description: The start date of the period.
          example: '2016-11-01'
        under_budget:
          type: boolean
          description: Whether the budget has not been exceeded in the period.
          example: true
        under_by:
          type: number
          description: How much there is left in the budget for the period.
          example: 17.7

    Provider:
      type: object
      properties:
        id:
          type: string
          format: number
          description: The unique identifier of the data connection feed provider
          example: '42'
        name:
          type: string
          description: Name of the data connection feed provider
          example: Bank of America
        ascii_name:
          type: string
          description: ASCII version of the data connection feed provider name
          example: Bank of America
        backend:
          type: string
          description: Data connection feed provider
          example: yodlee
        country:
          type: string # XXX (zkanzler): is this really what country describes?
          description: Country of origin of the provider # XXX (zkanzler): will this always be a two-letter country code?
          example: US
        authorisation_method:
          type: string # XXX (zkanzler): what's this for?
          description: UNKNOWN
        external_authorisation:
          type: boolean # XXX (zkanzler): what's this for?
          description: UNKNOWN
        syncing_method:
          type: string # XXX (zkanzler): what's this for?
          description: UNKNOWN
        external_syncing:
          type: boolean # XXX (zkanzler): what's this for?
          description: UNKNOWN
        available:
          type: boolean # XXX (zkanzler): what's this for?
          description: UNKNOWN
        brand_sensitive:
          type: boolean # XXX (zkanzler): what's this for?
          description: UNKNOWN
        experimental:
          type: boolean # XXX (zkanzler): what's this for?
          description: UNKNOWN
        enabled:
          type: boolean
          description: Whether the provider can be used
        home_url:
          type: string
          format: url
          description: Link to homepage of provider
        login_url:
          type: string
          format: url
          description: Link to login page of provider
        default_logo_url:
          type: string
          format: url
          description: Default URL to provider's logo
        custom_logo_url:
          type: string
          format: url # XXX (zkanzler): who provides this URL?
          description: URL to provider's logo to override the default
        provider_notices:
          type: array # XXX (zkanzler): what's this for?
          description: UNKNOWN # TODO (zkanzler): declare array items schema with real info
          items:
            type: string
        backend_requires_consent:
          type: boolean # XXX (zkanzler): what's this for?
          description: UNKNOWN
        backend_consent_text:
          type: string
          description: UNKNOWN
          nullable: true # XXX (zkanzler): what's this for?
        backend_consent_html:
          type: string
          description: UNKNOWN
          nullable: true # XXX (zkanzler): what's this for?
        created_at:
          type: string
          format: date-time
          description: When the data connection feed provider was first created
        updated_at:
          type: string
          format: date-time
          description: When the data connection feed provider was last updated
          nullable: true

    Scenario:
      type: object
      properties:
        achieve_date:
          type: string
          description: For goals, the date that they should be achieved by.
        closing_balance:
          type: number
          description: The closing balance of the scenario.
          example: 5431.2
        closing_balance_date:
          type: string
          format: date
          description: The date of the closing balance.
          example: '2018-02-27'
        created_at:
          type: string
          format: date-time
          description: When the scenario was created.
          example: '2015-04-21T22:42:22Z'
        current_balance:
          type: number
          description: The current balance of the scenario.
          example: 5431.2
        current_balance_date:
          type: string
          format: date
          description: The date of the current balance.
          example: '2018-02-27'
        description:
          type: string
          description: A short description of what the scenario is modelling.
        id:
          type: integer
          description: The unique identifier of the scenario.
          example: 42
        interest_rate:
          type: number
          description: The amount of interest to apply to the balance. Will apply
            periodically depending on what `interest_rate_repeat_id` is set to.
          example: 2.4
        interest_rate_repeat_id:
          type: integer
          description: A number representing how often the interest should be applied.
            0 is used for no interest, 2 is weekly, 3 is fortnightly, 4 is monthly,
            5 is yearly and 7 for quarterly.
          example: 4
        maximum-value:
          type: number
          example: 42
        minimum-value:
          type: number
          example: 4000
        starting_balance:
          type: number
          description: The starting balance of the scenario.
          example: 2450
        starting_balance_date:
          type: string
          format: date
          description: The date of the starting balance.
          example: '2018-02-27'
        title:
          type: string
          description: The title of the scenario.
          example: Wedding
        type:
          type: string
          description: The type of the scenario.
          example: no-interest
          enum:
            - no-interest
            - savings
            - debt
        updated_at:
          type: string
          format: date-time
          description: When the scenario was last updated.
          example: '2015-04-21T22:42:22Z'

    Transaction:
      type: object
      properties:
        amount:
          type: number
          example: 34.6
        category:
          $ref: '#/components/schemas/Category'
        cheque_number:
          type: string
          example: '503113643691'
        closing_balance:
          type: number
          description: The closing balance of the account at the transaction.
          example: 4312.32
        date:
          type: string
          format: date
          description: The date the transaction took place.
          example: '2018-02-27'
        id:
          type: integer
          description: The unique identifier of the transaction.
          example: 42
        is_transfer:
          type: boolean
          description: Whether the transaction was a transfer.
          example: false
        labels:
          type: array
          example:
            - foo
            - bar
            - baz
          items:
            type: string
        memo:
          type: string
          example: An example memo
        note:
          type: string
          example: I spent way too much on cheese here
        original_payee:
          type: string
          description: The payee the transaction was created with.
          example: CARD4083ST MARTINS NEW WORLD CHRISTCHURCH
        payee:
          type: string
          description: The payee/merchant of the transaction.
          example: St Martins New World
        status:
          type: string
          description: The status of the transaction. Pending transactions are temporary
            and may be superseded later by their posted counterparts, which are permanent.
          enum:
            - pending
            - posted
        transaction_account:
          $ref: '#/components/schemas/TransactionAccount'
        type:
          type: string
          description: Whether the transaction is a debit or a credit
          example: credit
          enum:
            - debit
            - credit
        upload_source:
          type: string
          description: Where the transaction came from.
          example: file

    TransactionAccount:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          example: '2015-03-17T02:42:10Z'
        currency_code:
          type: string
          description: The currency that the account is in. This is determined by
            the account that the transaction account belongs to.
          example: NZD
        current_balance:
          type: number
          example: 2694.39
        current_balance_date:
          type: string
          format: date
          example: '2015-07-03'
        id:
          type: integer
          example: 96027
        institution:
          $ref: '#/components/schemas/Institution'
        name:
          type: string
          example: Sample Credit
        number:
          type: string
          example: ASBCRD44554
        starting_balance:
          type: number
          example: 3547.45
        starting_balance_date:
          type: string
          format: date
          example: '2015-03-15'
        updated_at:
          type: string
          format: date-time
          example: '2015-07-02T22:14:49Z'

    User:
      type: object
      properties:
        always_show_base_currency:
          type: boolean
          description: Whether the user wants to see all accounts in their base currency
            instead of the native account currency.
          example: false
        avatar_url:
          type: string
          description: The URL to the user's avatar.
          example: https://image.com/image.png
        base_currency_code:
          type: string
          description: The user's base currency.
          example: NZD
        beta_user:
          type: boolean
          description: Whether the user has opted in to beta features.
          example: true
        created_at:
          type: string
          format: date-time
          description: When the user signed up.
          example: '2015-07-02T22:14:49Z'
        email:
          type: string
          description: The user's email address.
          example: user69@sample.com
        id:
          type: integer
          description: The unique identifier of the user.
          example: 42
        last_activity_at:
          type: string
          format: date-time
          description: When the user last interacted with PocketSmith, via any application
            or the API.
          example: '2015-07-02T22:14:49Z'
        last_logged_in_at:
          type: string
          format: date-time
          description: When the user last logged into PocketSmith.
          example: '2015-07-02T22:14:49Z'
        login:
          type: string
          description: The user's username.
          example: sampleuser69
        name:
          type: string
          description: The full name of the user, although not all users will have
            a name set.
          example: Foo Barrington
        time_zone:
          type: string
          description: The user's time zone.
          example: Auckland
        updated_at:
          type: string
          format: date-time
          description: When the user was last updated.
          example: '2015-07-02T22:14:49Z'
        using_multiple_currencies:
          type: boolean
          description: Whether the user has multiple currencies in use across their
            account.
          example: true
        week_start_day:
          type: integer
          description: The day of the week the user wishes their calendars to start
            on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.
          example: 1


paths:

  /accounts/{id}:
    get:
      operationId: getAccount
      summary: Get account
      description: Gets an account by its ID.
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the account.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404' 

    put:
      operationId: updateAccount
      summary: Update account
      description: Updates and returns an account by its ID.
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the account.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currency_code:
                  type: string
                  description: A new currency code for the account.
                  example: NZD
                title:
                  type: string
                  description: A new title for the account.
                  example: Savings
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422' 

    delete:
      operationId: deleteAccount
      summary: Delete account
      description: Deletes an account and all its data by ID, optionally merge scenarios
        into another account.
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the account.
          schema:
            type: integer
          example: 42
      responses:
        '204':
          description: Success
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'

  /accounts/{id}/transactions:
    get:
      operationId: listAccountTransactions
      summary: List transactions in account
      description: Lists transactions belonging to an account by its ID.
      tags:
        - Transactions
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the account.
          schema:
            type: integer
          example: 42
        - name: start_date
          in: query
          required: false
          description: Return only transactions on or after this date. Required if
            end_date is provided. If not provided, defaults to the furtherest date
            allowed by the user's subscription.
          schema:
            type: string
          example: '2016-11-01'
        - name: end_date
          in: query
          required: false
          description: Return transactions that fall on or before this date. Required
            if start_date is provided. If not provided, defaults to today's date.
          schema:
            type: string
          example: '2016-11-30'
        - name: only_uncategorised
          in: query
          required: false
          description: If set, will return only uncategorised results.
          schema:
            type: integer
          example: 1
        - name: type
          in: query
          required: false
          description: Only return transactions of this type.
          schema:
            type: string
            enum:
              - debit
              - credit
          example: debit
        - name: page
          in: query
          required: false
          description: Choose a particular page of the results.
          schema:
            type: integer
            default: 1
            minimum: 1
          example: 3
        - name: per_page
          in: query
          required: false
          description: Number of records to return in a single response.
          schema:
            type: integer
            default: 30
            maximum: 100
            minimum: 10
          example: 30
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /attachments/{id}:
    get:
      operationId: getAttachment
      summary: Get attachment
      description: Gets a particular attachment by its ID.
      tags:
        - Attachments
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the attachment.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404' 

    put:
      operationId: updateAttachment
      summary: Update attachment
      description: Updates the title of the attachment.
      tags:
        - Attachments
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the attachment.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The new title of the attachment. If the title is blank
                    or not provided, the server will derive a title from the file
                    name.
                  example: Invoice for taxi
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404' 

    delete:
      operationId: deleteAttachment
      summary: Delete attachment
      description: Deletes a particular attachment by its ID.
      tags:
        - Attachments
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the attachment.
          schema:
            type: integer
          example: 42
      responses:
        '204':
          description: Success
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /categories/{id}:
    get:
      operationId: getCategory
      summary: Get category
      description: Gets a particular category by its ID.
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the category.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404' 

    put:
      operationId: updateCategory
      summary: Update category
      description: Updates the title, colour or parent of the category.
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the category.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                colour:
                  type: string
                  description: A new CSS-style hex colour for the category.
                  example: '#e0e7ff'
                parent_id:
                  type: integer
                  description: The unique identifier of a parent category for the
                    category, making this category a child of that category.
                  example: 42
                title:
                  type: string
                  description: A new title for the category.
                  example: Food
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422' 

    delete:
      operationId: deleteCategory
      summary: Delete category
      description: Deletes a particular category by its ID. This will delete all budgets
        within the category, and uncategorize all transactions assigned to the category.
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the category.
          schema:
            type: integer
          example: 42
      responses:
        '204':
          description: Success
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /categories/{id}/category_rules:
    post:
      operationId: createCategoryRule
      summary: Create category rule in category
      description: Creates a rule to allocate a category to transactions.
      tags:
        - Category Rules
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the category.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apply_to_all:
                  type: boolean
                  description: Apply the created category rule to all transactions.
                  example: false
                apply_to_uncategorised:
                  type: boolean
                  description: Apply the created category rule to all uncategorised
                    transactions.
                  example: true
                payee_matches:
                  type: string
                  description: The keyword/s to match the transaction payees.
                  example: Countdown
              required:
                - category_id
                - payee_matches
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryRule'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'

  /data_feeds_connections:
    get:
      operationId: getDataConnections
      summary: Get the data connections (bank feeds) of the authenticated user
      tags:
        - Data Connections
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataConnection'

  /data_feeds_connections/{id}:
    get:
      operationId: getDataConnection
      summary: Retrieve the specified data connection (bank feed)
      tags:
        - Data Connections
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the data connection.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataConnection'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404' 

    put:
      operationId: updateDataConnection
      summary: Update the data connection, potentially to submit a form
      tags:
        - Data Connections
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the data connection.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                automatic_syncing:
                  $ref: '#/components/schemas/DataConnection/properties/automatic_syncing'
                categorisation:
                  $ref: '#/components/schemas/DataConnection/properties/categorisation'
                name:
                  $ref: '#/components/schemas/DataConnection/properties/name'
                pending_transactions:
                  $ref: '#/components/schemas/DataConnection/properties/pending_transactions'
                login_form:
                  $ref: '#/components/schemas/DataConnection/properties/login_form'
                interactive_login_form:
                  $ref: '#/components/schemas/DataConnection/properties/interactive_login_form'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataConnection'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'

  /data_feeds_connections/{id}/data_feeds_accounts:
    get:
      operationId: getDataConnectionAccounts
      summary: Get the accounts associated with the specified data connections (bank
        feeds)
      tags:
        - Data Connections
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the data connection.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /institutions/{id}:
    get:
      operationId: getInstitution
      summary: Get institution
      description: Gets an institution by its ID.
      tags:
        - Institutions
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the institution.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404' 

    put:
      operationId: updateInstitution
      summary: Update institution
      description: Updates the title and currency code for an institution.
      tags:
        - Institutions
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the institution.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currency_code:
                  type: string
                  description: A new currency code for the institution.
                  example: NZD
                title:
                  type: string
                  description: A new title for the institution.
                  example: Bank of Foo
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422' 

    delete:
      operationId: deleteInstitution
      summary: Delete institution
      description: Deletes an institution and all data within. Alternatively, another
        institution can be provided to merge the data into to avoid losing it.
      tags:
        - Institutions
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the institution.
          schema:
            type: integer
          example: 42
      responses:
        '204':
          description: Success
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'

  /institutions/{id}/accounts:
    get:
      operationId: listInstitutionAccounts
      summary: List accounts in institution
      description: Lists accounts belonging to an institution by its ID.
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the institution.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Account'
                type: array
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /me:
    get:
      operationId: getMe
      summary: Get the authorised user
      description: Gets the user that corresponds to the access token used in the
        request.
      tags:
        - Users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /transaction_accounts/{id}:
    get:
      operationId: getTransactionAccount
      summary: Get transaction account
      description: Gets a transaction account by its ID.
      tags:
        - Transaction Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the transaction account.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionAccount'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404' 

    put:
      operationId: updateTransactionAccount
      summary: Update transaction account
      description: Change which institution the transaction account belongs to.
      tags:
        - Transaction Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the transaction account.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                institution_id:
                  type: integer
                  description: The unique identifier of a new institution for the
                    transaction account.
                  example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionAccount'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /transaction_accounts/{id}/transactions:
    post:
      operationId: createTransactionAccountTransaction
      summary: Create a transaction in transaction account
      description: Creates a transaction in a transaction account by its ID.
      tags:
        - Transactions
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the transaction account.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  description: The amount of the transaction. A positive amount is
                    a credit, and a negative amount is a debit.
                  example: 11.5
                category_id:
                  type: integer
                  description: The unique identifier of a category for the transaction.
                  example: 42
                cheque_number:
                  type: string
                  description: A cheque number for the transaction.
                date:
                  type: string
                  description: The date when the transaction occurred.
                  example: '2018-02-27'
                is_transfer:
                  type: boolean
                  description: Whether the transaction should be indicated as a transfer.
                  example: false
                labels:
                  type: string
                  description: A set of comma-separated labels for the transaction.
                  example: lunch,mexican
                memo:
                  type: string
                  description: A memo for the transaction.
                note:
                  type: string
                  description: A note for the transaction.
                  example: I really enjoyed the loaded corn chips
                payee:
                  type: string
                  description: The payee/merchant of the transaction.
                  example: Tex Otago
              required:
                - payee
                - amount
                - date
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422' 

    get:
      operationId: listTransactionAccountTransactions
      summary: List transactions in transaction account
      description: Lists transactions belonging to a transaction account by its ID.
      tags:
        - Transactions
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the transaction account.
          schema:
            type: integer
          example: 42
        - name: start_date
          in: query
          required: false
          description: Return only transactions on or after this date. Required if
            `end_date` is provided. If not provided, defaults to the furtherest date
            allowed by the user's subscription.
          schema:
            type: string
          example: '2016-11-01'
        - name: end_date
          in: query
          required: false
          description: Return transactions that fall on or before this date. Required
            if `start_date` is provided. If not provided, defaults to today's date.
          schema:
            type: string
          example: '2016-11-30'
        - name: only_uncategorised
          in: query
          required: false
          description: If set, will return only uncategorised results.
          schema:
            type: integer
          example: 1
        - name: type
          in: query
          required: false
          description: Only return transactions of this type.
          schema:
            type: string
            enum:
              - debit
              - credit
          example: debit
        - name: search
          in: query
          required: false
          description: Only return transactions matching these search terms
          schema:
            type: string
          example: debit
        - name: page
          in: query
          required: false
          description: Choose a particular page of the results.
          schema:
            type: integer
            default: 1
            minimum: 1
          example: 3
        - name: per_page
          in: query
          required: false
          description: Number of records to return in a single response.
          schema:
            type: integer
            default: 30
            maximum: 100
            minimum: 10
          example: 30
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /transactions/{id}:
    get:
      operationId: getTransaction
      summary: Get a transaction
      description: Gets a transaction by its ID.
      tags:
        - Transactions
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the transaction.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404' 

    put:
      operationId: updateTransaction
      summary: Update a transaction
      description: Updates a transaction by its ID.
      tags:
        - Transactions
      parameters:
        - name: labels
          in: query
          required: false
          description: A new set of labels for the transaction.
          schema:
            type: string
            description: A new comma-separated set of labels for the transaction.
          example: foo,bar,baz
        - name: id
          in: path
          required: true
          description: The unique identifier of the transaction.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  description: A new amount for the transaction.
                  example: 225
                category_id:
                  type: integer
                  description: The unique identifier of a new category for the transaction.
                  example: 42
                cheque_number:
                  type: string
                  description: A new cheque number for the transaction.
                  example: '503113643691'
                date:
                  type: string
                  description: A new date for the transaction.
                  example: '2018-02-27'
                is_transfer:
                  type: boolean
                  description: Whether the transaction is a transfer or not.
                  example: false
                memo:
                  type: string
                  description: A new memo for the transaction.
                  example: Rent
                note:
                  type: string
                  description: A new note for the transaction.
                payee:
                  type: string
                  description: A new payee for the transaction.
                  example: Bill
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'

  /transactions/{id}/attachments:
    post:
      operationId: assignTransactionAttachment
      summary: Assigns attachment to transaction
      description: Assigns an attachment to the transaction by their ID.
      tags:
        - Attachments
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the transaction.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                attachment_id:
                  type: integer
                  description: The unique identifier of the attachment.
                  example: 1438154
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422' 

    get:
      operationId: listTransactionAttachments
      summary: List attachments in transaction
      description: Lists attachments belonging to a transaction by their ID.
      tags:
        - Attachments
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the transaction.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attachment'
                type: array
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /transactions/{transaction_id}/attachments/{attachment_id}:
    delete:
      operationId: unassignTransactionAttachment
      summary: Unassigns attachment in transaction
      description: Unassigns a particular attachment by its ID from the transaction
        ID. This does not delete the attachment, it only removes its association from
        the transaction.
      tags:
        - Attachments
      parameters:
        - name: transaction_id
          in: path
          required: true
          description: The unique identifier of the transaction.
          schema:
            type: integer
          example: 42
        - name: attachment_id
          in: path
          required: true
          description: The unique identifier of the attachment.
          schema:
            type: integer
          example: 1438154
      responses:
        '204':
          description: Success
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /users/{id}:
    get:
      operationId: getUser
      summary: Get user
      description: Gets a user by ID. You must be authorised as the target user in
        order to make this request.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/404' 

    put:
      operationId: updateUser
      summary: Update user
      description: Updates the user by their ID. You must be authorised as the target
        user in order to make this request.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                always_show_base_currency:
                  type: boolean
                  description: Whether the user wishes to have all monetary values
                    converted to their base currency.
                  example: true
                base_currency_code:
                  type: string
                  description: A new base currency code for the user.
                  example: nzd
                beta_user:
                  type: boolean
                  description: Whether the user is a beta user, and wishes to try
                    out new features.
                  example: true
                email:
                  type: string
                  description: A new email address for the user.
                  example: foo@bar.com
                name:
                  type: string
                  description: A new name for the user.
                  example: John Appleseed
                time_zone:
                  type: string
                  description: A new time zone for the user.
                  example: Auckland
                week_start_day:
                  type: integer
                  description: The day of the week the user wishes their calendars
                    to start on. A number between 0 and 6, where 0 is Sunday and 6
                    is Saturday.
                  example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'

  /users/{id}/accounts:
    post:
      operationId: createAccount
      summary: Create an account in user
      description: Creates and returns an account belonging to the user by their ID.
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currency_code:
                  type: string
                  description: A currency code for the account.
                  example: NZD
                institution_id:
                  type: integer
                  description: The ID of the institution to create this account in.
                  example: 42
                title:
                  type: string
                  description: A title for the account.
                  example: Foo
                type:
                  type: string
                  description: The type of the account.
                  example: bank
                  enum:
                    - bank
                    - credits
                    - loans
                    - mortgage
                    - stocks
                    - vehicle
                    - property
                    - other_asset
                    - other_liability
              required:
                - institution_id
                - title
                - currency_code
                - type
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404' 

    get:
      operationId: listAccounts
      summary: List accounts in user
      description: Lists all accounts belonging to the user by their ID.
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Account'
                type: array
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /users/{id}/attachments:
    post:
      operationId: createAttachment
      summary: Create attachment in user
      description: Creates an attachment belonging to the user by their ID.
      tags:
        - Attachments
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file_data:
                  type: string
                  format: base64
                  description: The base64-encoded contents of the source file. The
                    supported file types are png, jpg, pdf, xls, xlsx, doc, docx.
                file_name:
                  type: string
                  description: The file name of the attachment.
                  example: taxi.png
                title:
                  type: string
                  description: The title of the attachment. If the title is blank
                    or not provided, the title will derived from the file name.
                  example: Invoice for taxi
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422' 

    get:
      operationId: listAttachments
      summary: Lists attachments in user
      description: Lists attachments belonging to a user by their ID.
      tags:
        - Attachments
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
        - name: unassigned
          in: query
          required: false
          description: If set, returns unassigned attachments, that are available
            for assigning to a transaction.
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attachment'
                type: array
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /users/{id}/budget:
    get:
      operationId: listBudgets
      summary: List budget for user
      description: Lists the user's budget, consisting of one or more budget analysis
        packages, one per category. Akin to the list on the Budget page in PocketSmith.
      tags:
        - Budgeting
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the account.
          schema:
            type: integer
          example: 42
        - name: roll_up
          in: query
          required: false
          description: Whether parent categories should have their children rolled
            up into them. When used, the children will still appear in the collection
            on their own, but their actual and forecast figures will be rolled up
            to the root parent.
          schema:
            type: boolean
          example: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BudgetAnalysisPackage'
                type: array

  /users/{id}/budget_summary:
    get:
      operationId: getBudgetSummary
      summary: Get budget summary for user
      description: Get the user's budget summary, containing an expense and income
        analysis for all categories (excluding transfer categories) for the given
        period and date range. Akin to the overall budget shown on the Budget page
        in PocketSmith.
      tags:
        - Budgeting
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
        - name: period
          in: query
          required: true
          description: The period to analyse in, one of `weeks`, `months` or `years`.
            Also supported is `event`, although event period analysis is only possible
            when the budget events gathered align, so in this case where all categories
            are analysed together, it's highly unlikely that event period analysis
            will be possible.
          schema:
            type: string
            enum:
              - weeks
              - months
              - years
              - event
          example: weeks
        - name: interval
          in: query
          required: true
          description: The period interval, e.g. if the interval is 2 and the period
            is weeks, the budget will be analysed fortnightly.
          schema:
            type: integer
          example: 2
        - name: start_date
          in: query
          required: true
          description: The date to start analysing the budget from. This will be bumped
            out to make full periods as necessary.
          schema:
            type: string
          example: '2016-11-01'
        - name: end_date
          in: query
          required: true
          description: The date to stop analysing the budget from. This will be bumped
            out to make full periods as necessary.
          schema:
            type: string
          example: '2016-11-30'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BudgetAnalysisPackage'
                type: array

  /users/{id}/categories:
    post:
      operationId: createCategory
      summary: Create category in user
      description: Creates a category belonging to the user by their ID.
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                colour:
                  type: string
                  description: A CSS-style hex colour for the category.
                  example: '#e0e7ff'
                parent_id:
                  type: integer
                  description: The unique identifier of a category to be the parent
                    of this category.
                  example: 42
                title:
                  type: string
                  description: A title for the category.
                  example: Food
              required:
                - title
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422' 

    get:
      operationId: listCategories
      summary: List categories in user
      description: Lists all categories belonging to a user by their ID.
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Category'
                type: array
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /users/{id}/category_rules:
    get:
      operationId: listCategoryRules
      summary: List category rules in user
      description: Lists all category rules belonging to a user by their ID.
      tags:
        - Category Rules
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CategoryRule'
                type: array
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /users/{id}/institutions:
    post:
      operationId: createInstitution
      summary: Create institution in user
      description: Creates an institution belonging to a user.
      tags:
        - Institutions
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            type: integer
          example: 42
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currency_code:
                  type: string
                  description: A currency code for the institution.
                  example: NZD
                title:
                  type: string
                  description: A title for the institution.
                  example: Bank of Foo
              required:
                - title
                - currency_code
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422' 

    get:
      operationId: listInstitutions
      summary: List institutions in user
      description: Lists all the institutions belonging to the user.
      tags:
        - Institutions
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Institution'
                type: array
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /users/{id}/transaction_accounts:
    get:
      operationId: listTransactionAccounts
      summary: List transaction accounts in user
      description: List all transaction accounts belonging to a user.
      tags:
        - Transaction Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TransactionAccount'
                type: array
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /users/{id}/transactions:
    get:
      operationId: listTransactions
      summary: List transactions in user
      description: Lists transactions belonging to a user by their ID.
      tags:
        - Transactions
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the account.
          schema:
            type: integer
          example: 42
        - name: start_date
          in: query
          required: false
          description: Return only transactions on or after this date. Required if
            end_date is provided. If not provided, defaults to the furtherest date
            allowed by the user's subscription.
          schema:
            type: string
          example: '2016-11-01'
        - name: end_date
          in: query
          required: false
          description: Return transactions that fall on or before this date. Required
            if start_date is provided. If not provided, defaults to today's date.
          schema:
            type: string
          example: '2016-11-30'
        - name: only_uncategorised
          in: query
          required: false
          description: If set, will return only uncategorised results.
          schema:
            type: integer
          example: 1
        - name: type
          in: query
          required: false
          description: Only return transactions of this type.
          schema:
            type: string
            enum:
              - debit
              - credit
          example: debit
        - name: page
          in: query
          required: false
          description: Choose a particular page of the results.
          schema:
            type: integer
            default: 1
            minimum: 1
          example: 3
        - name: per_page
          in: query
          required: false
          description: Number of records to return in a single response.
          schema:
            type: integer
            default: 30
            maximum: 100
            minimum: 10
          example: 30
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /users/{id}/trend_analysis:
    get:
      operationId: getTrendAnalysis
      summary: Get trend analysis for user
      description: Get an income and/or expense budget analysis for the given date
        range and period across any number of categories and scenarios. Akin to the
        Trends page in PocketSmith.
      tags:
        - Budgeting
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: integer
          example: 42
        - name: period
          in: query
          required: true
          description: The period to analyse in, one of `weeks`, `months` or `years`.
            Also supported is `event`, although event period analysis is only possible
            when the budget events gathered align, so in this case where all categories
            are analysed together, it's highly unlikely that event period analysis
            will be possible.
          schema:
            type: string
            enum:
              - weeks
              - months
              - years
              - event
          example: weeks
        - name: interval
          in: query
          required: true
          description: The period interval, e.g. if the interval is 2 and the period
            is weeks, the budget will be analysed fortnightly.
          schema:
            type: integer
          example: true
        - name: start_date
          in: query
          required: true
          description: The date to start analysing the budget from. This will be bumped
            out to make full periods as necessary.
          schema:
            type: string
          example: '2016-11-01'
        - name: end_date
          in: query
          required: true
          description: The date to stop analysing the budget from. This will be bumped
            out to make full periods as necessary.
          schema:
            type: string
          example: '2016-11-30'
        - name: categories
          in: query
          required: true
          description: A comma-separated list of category IDs to analyse.
          schema:
            type: string
          example: 42,49
        - name: scenarios
          in: query
          required: true
          description: A comma-separated list of scenario IDs to analyse. You're likely
            going to want to include all a user's scenarios here, unless you have
            reason to only analyse for a subset of scenarios. Regardless of what scenarios
            are analysed, all actuals (transactions) across all accounts will be included.
          schema:
            type: string
          example: 11,29
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetAnalysisPackage'
